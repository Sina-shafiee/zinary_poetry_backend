# Generated by Django 5.1.3 on 2024-11-22 00:58

# Generated by Django 5.1.3 on 2024-11-22 10:00

from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType


def add_delete_permissions(apps, schema_editor):
    writer_group = Group.objects.get(name="Writer")

    Poet = apps.get_model("poet", "Poet")
    Poem = apps.get_model("poem", "Poem")
    Collection = apps.get_model("collection", "Collection")
    Verse = apps.get_model("verse", "Verse")

    # Content types
    poet_content_type = ContentType.objects.get_for_model(Poet)
    poem_content_type = ContentType.objects.get_for_model(Poem)
    collection_content_type = ContentType.objects.get_for_model(Collection)
    verse_content_type = ContentType.objects.get_for_model(Verse)

    delete_permissions = [
        {
            "codename": "delete_poet",
            "name": "Can delete poet",
            "content_type": poet_content_type,
        },
        {
            "codename": "delete_poem",
            "name": "Can delete poem",
            "content_type": poem_content_type,
        },
        {
            "codename": "delete_collection",
            "name": "Can delete collection",
            "content_type": collection_content_type,
        },
        {
            "codename": "delete_verse",
            "name": "Can delete verse",
            "content_type": verse_content_type,
        },
    ]

    for perm_data in delete_permissions:
        # Check if the permission already exists
        permission, created = Permission.objects.get_or_create(
            codename=perm_data["codename"],
            defaults={
                "name": perm_data["name"],
                "content_type": perm_data["content_type"],
            },
        )
        writer_group.permissions.add(permission)


def remove_delete_permissions(apps, schema_editor):
    writer_group = Group.objects.get(name="Writer")

    delete_permission_codenames = [
        "delete_poet",
        "delete_poem",
        "delete_collection",
        "delete_verse",
    ]

    for codename in delete_permission_codenames:
        try:
            permission = Permission.objects.get(codename=codename)
            writer_group.permissions.remove(permission)
        except Permission.DoesNotExist:
            pass  # Skip if the permission does not exist


class Migration(migrations.Migration):

    dependencies = [
        ("user", "0004_populate_default_groups_permissions"),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("poet", "0002_alter_poet_table"),
        ("poem", "0001_initial"),
        ("verse", "0001_initial"),
        ("collection", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(
            add_delete_permissions, reverse_code=remove_delete_permissions
        ),
    ]
