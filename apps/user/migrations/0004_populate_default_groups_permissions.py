# Generated by Django 5.1.3 on 2024-11-16 23:20

from django.db import migrations

from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType


def create_default_permissions(apps, schema_editor):
    writer_group = Group.objects.get(name='Writer')
    basic_user_group = Group.objects.get(name='Basic User')

    Poet = apps.get_model('poet', 'Poet')
    Poem = apps.get_model('poem', 'Poem')
    Collection = apps.get_model('collection', 'Collection')
    Verse = apps.get_model('verse', 'Verse')

    # content types
    poet_content_type = ContentType.objects.get_for_model(Poet)
    poem_content_type = ContentType.objects.get_for_model(Poem)
    collection_content_type = ContentType.objects.get_for_model(Collection)
    verse_content_type = ContentType.objects.get_for_model(Verse)

    permissions_to_add = [
        # Poet
        {
            "codename": "add_poet",
            "name": "Can add poet",
            "content_type": poet_content_type,
            "groups": [writer_group],
        },
        {
            "codename": "change_poet",
            "name": "Can change poet",
            "content_type": poet_content_type,
            "groups": [writer_group],
        },
        {
            "codename": "view_poet",
            "name": "Can view poet",
            "content_type": poet_content_type,
            "groups": [writer_group, basic_user_group],
        },
        # Poem
        {
            "codename": "add_poem",
            "name": "Can add poem",
            "content_type": poem_content_type,
            "groups": [writer_group],
        },
        {
            "codename": "change_poem",
            "name": "Can change poem",
            "content_type": poem_content_type,
            "groups": [writer_group],
        },
        {
            "codename": "view_poem",
            "name": "Can view poem",
            "content_type": poem_content_type,
            "groups": [writer_group, basic_user_group],
        },
        # Collection
        {
            "codename": "add_collection",
            "name": "Can add collection",
            "content_type": collection_content_type,
            "groups": [writer_group],
        },
        {
            "codename": "change_collection",
            "name": "Can change collection",
            "content_type": collection_content_type,
            "groups": [writer_group],
        },
        {
            "codename": "view_collection",
            "name": "Can view collection",
            "content_type": collection_content_type,
            "groups": [writer_group, basic_user_group],
        },
        # Verse
        {
            "codename": "view_verse",
            "name": "Can view verse",
            "content_type": verse_content_type,
            "groups": [writer_group, basic_user_group],
        },
        {
            "codename": "change_verse",
            "name": "Can change Verse",
            "content_type": verse_content_type,
            "groups": [writer_group],
        },
        {
            "codename": "add_verse",
            "name": "Can add Verse",
            "content_type": verse_content_type,
            "groups": [writer_group],
        },
    ]

     # Add Permissions to the Database and Associate with Groups
    for perm_data in permissions_to_add:
        # Check if the permission already exists
        permission = Permission.objects.filter(
            codename=perm_data["codename"],
            content_type=perm_data["content_type"]
        ).first()

        if not permission:  # If permission doesn't exist, create it
            permission = Permission.objects.create(
                codename=perm_data["codename"],
                name=perm_data["name"],
                content_type=perm_data["content_type"]
            )
        
        for group in perm_data["groups"]:
            group.permissions.add(permission)

def reverse_create_default_permissions(apps, schema_editor):
    # Get Groups
    writer_group = Group.objects.get(name='Writer')
    basic_user_group = Group.objects.get(name='Basic User')


    # Permissions to Remove
    permissions_to_remove = [
        "add_poet", "change_poet", "view_poet",
        "add_poem", "change_poem", "view_poem",
        "add_collection", "change_collection", "view_collection",
        "add_verse", "change_verse", "view_verse"
    ]

    # Remove Permissions from the Groups
    for codename in permissions_to_remove:
        try:
            permission = Permission.objects.get(codename=codename)
            writer_group.permissions.remove(permission)
            basic_user_group.permissions.remove(permission)
        except Permission.DoesNotExist:
            pass  # Skip if permission doesn't exist


class Migration(migrations.Migration):

    dependencies = [
        ('user', '0003_alter_user_table'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('poet', '0002_alter_poet_table'),
        ('poem', '0001_initial'),
        ('verse', '0001_initial'),
        ('collection', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_default_permissions, reverse_code=reverse_create_default_permissions),
    ]
